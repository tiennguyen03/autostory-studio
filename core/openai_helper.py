import re
import os
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")

if not api_key:
    raise EnvironmentError("Missing OPENAI_API_KEY in environment variables.")

client = OpenAI(api_key=api_key)

# Prompt template for true-crime TikTok scripts
structure_prompt = """
Follow this 7-part structure exactly, but DO NOT label the parts in the output.
Do not write things like 'üü¢ CONTEXT (PART 1)' or 'üü° REVEAL (PART 7)' ‚Äî only output the story text.

Narration style:
- Cold, detached, and factual ‚Äî like a documentary voiceover.
- Use dramatic pauses ("...") for tension.
- Mix short, blunt sentences with occasional longer descriptive ones.
- End some beats with sharp, unsettling words for impact.
- Never add commentary, opinion, or explanation.

Beat formatting rules:
- Output **one beat per line.**
- Each beat should be a single sentence, or at most two tightly related short sentences.
- Never combine multiple separate ideas into one beat.
- Break up complex details into multiple beats so each is simple and visual.
- Do NOT output long paragraphs. Always use one line = one beat.
- Keep the total script around the requested word count (¬±10%).

The hidden structure you must follow:
1. CONTEXT
   - Start with the date and place: ‚ÄúIt‚Äôs [year]. [City or country].‚Äù
   - Introduce the main people and setup in simple, factual beats.
   - Add one cultural or historical detail that sets the scene.

2. SMALL TWIST
   - Insert a beat that suggests calm, stability, or early tension.
   - Keep it subtle ‚Äî life seemed normal, or something unusual went unnoticed.

3. PLOT TWIST
   - Describe the turning point when everything went wrong.
   - Show betrayal, violence, or sudden disaster.
   - End this section with a dramatic shift or consequence.

4. CONTEXT
   - Show how the main person or community reacted.
   - Use short, visual beats of actions or movements.
   - Mention an alliance, suspicion, or key clue if relevant.

5. SMALL TWIST
   - Insert a quiet moment of tension or mystery.
   - Keep it understated, no long explanations.

6. FINAL CONSEQUENCE
   - Describe the outcome or fallout.
   - Leave an air of uncertainty or mystery.

7. REVEAL
   - End with a chilling final beat.
   - This can be the identity of the person, the place, or a key fact that leaves the audience stunned.
   - Keep it short, cold, and factual ‚Äî one line that delivers closure or shock.
   - The wording should feel natural, not formulaic. Do not always use the same sentence pattern.

Tone:
- Visual, factual, and cinematic ‚Äî like scenes strung together.
- Facts should disturb by themselves; do not exaggerate.
- Every beat must be vivid and visual, as if it could be drawn into one frame.
"""

def generateScript(article_text, approx_length=90):

    """
    Generate a TikTok-style true-crime script from an article.

    Args:
        article_text (str): The source article to base the script on.
        approx_length (int): Target script length in seconds.
    Returns:
        str: The generated script text.
    """

    def seconds_to_words(seconds, wpm=160):
        return int((seconds / 60) * wpm)

    word_budget = seconds_to_words(approx_length)

    user_prompt = (
        f"Use the following article as your only source material:\n\n{article_text}\n\n"
        f"Rewrite it into a TikTok script about {word_budget} words long "
        f"(‚âà{approx_length} seconds when read aloud at normal pace). "
        "Follow the 7-part structure strictly, do not add extra parts or commentary."
    )

    resp = client.chat.completions.create(
        model="gpt-5-mini",
        messages=[
            {"role": "system", "content": structure_prompt},
            {"role": "user", "content": user_prompt}
        ]
    )

    # üîπ Error handling / logging
    if not resp or not resp.choices:
        raise RuntimeError("No response returned from OpenAI")

    if not resp.choices[0].message:
        raise RuntimeError(f"Empty message in response: {resp}")

    output = resp.choices[0].message.content
    print(f"üìù Generated script length: {len(output.split())} words (target ‚âà {word_budget})")
    return output

def generateBeats(script_text):
    """
    Split a generated script into separate beats.
    Each line from the model output is assumed to be one beat.
    
    Args:
        script_text (str): The full script text generated by OpenAI.
    Returns:
        list[str]: List of beats (each beat is a short segment of the story).
    """
    
    if not script_text.strip():
        raise ValueError("Script text cannot be empty.")
    
    # Split into lines, one beat per line
    raw_beats = script_text.strip().split("\n")
    beats = [beat.strip() for beat in raw_beats if beat.strip()]

    # üîπ Sanity check & fallback
    if len(beats) < 5:  # too few beats, probably model ignored line breaks
        raw_beats = re.split(r'(?<=[.!?‚Ä¶])\s+', script_text)
        beats = [b.strip() for b in raw_beats if b.strip()]

    return beats


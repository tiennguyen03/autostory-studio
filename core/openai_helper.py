import re
import os
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")

if not api_key:
    raise EnvironmentError("Missing OPENAI_API_KEY in environment variables.")

client = OpenAI(api_key=api_key)

# Prompt template for true-crime TikTok scripts
structure_prompt = """
Follow this 7-part structure exactly, but DO NOT label the parts in the output.
Do not write things like '🟢 CONTEXT (PART 1)' or '🟡 REVEAL (PART 7)' — only output the story text.

Special instructions for narration:
- Use "..." for dramatic pauses.
- Vary sentence lengths: mix short, punchy lines with slightly longer factual ones.
- End beats with shocking or dramatic words for impact.
- Use cold, factual verbs like "cut," "burned," "vanished."
- Avoid commentary or explanation — just narration.
- Keep the total script around the requested word count. 
- Never exceed by more than 10 percent or fall short by more than 10%.

Beat formatting rules:
- Output **one beat per line.**
- Each beat should be a single sentence, or at most two tightly related short sentences.
- Never combine multiple separate ideas into one beat.
- Break up complex details into multiple beats so each is simple and visual.
- Do NOT output long paragraphs. Always use one line = one beat.

The hidden structure you must follow:
1. CONTEXT
   - Start with the date and place: “It’s [year]. [City or country].”
   - Introduce characters and setup in simple, factual beats
   - Add a cultural or shocking historical norm

2. SMALL TWIST
   - Use a transitional beat like “And for a while… it worked.”
   - Add a beat or two showing early success or tension building

3. PLOT TWIST
   - Show what went wrong
   - Add betrayal, ambition, or power struggle
   - End with a dramatic shift (exile, downfall, turning point)

4. CONTEXT
   - Show how the main character responded
   - Use short, visual beats of actions
   - Mention an important alliance if relevant

5. SMALL TWIST
   - Use a quiet tension beat (e.g. “And one night… she snuck back in.”)
   - Do not overexplain — keep it minimal

6. FINAL CONSEQUENCE
   - Reveal the major event or fallout
   - Keep it mysterious (“No one knows how.” “But one thing was clear…”)

7. REVEAL
   - Final punchline with identity: “And the [girl/man/place] who did it… was [name].”

Tone: visual, cold, factual — like a narrated historical scene.
Use disturbing facts from the actual cases, and make the plot twist disturbing.
Your final output must ONLY be the story text, with each beat already separated line by line.
"""

def generateScript(article_text, approx_length=90):

    """
    Generate a TikTok-style true-crime script from an article.

    Args:
        article_text (str): The source article to base the script on.
        approx_length (int): Target script length in seconds.
    Returns:
        str: The generated script text.
    """

    def seconds_to_words(seconds, wpm=160):
        return int((seconds / 60) * wpm)

    word_budget = seconds_to_words(approx_length)

    user_prompt = (
        f"Use the following article as your only source material:\n\n{article_text}\n\n"
        f"Rewrite it into a TikTok script about {word_budget} words long "
        f"(≈{approx_length} seconds when read aloud at normal pace). "
        "Follow the 7-part structure strictly, do not add extra parts or commentary."
    )

    resp = client.chat.completions.create(
        model="gpt-5-mini",
        messages=[
            {"role": "system", "content": structure_prompt},
            {"role": "user", "content": user_prompt}
        ]
    )

    # 🔹 Error handling / logging
    if not resp or not resp.choices:
        raise RuntimeError("No response returned from OpenAI")

    if not resp.choices[0].message:
        raise RuntimeError(f"Empty message in response: {resp}")

    output = resp.choices[0].message.content
    print(f"📝 Generated script length: {len(output.split())} words (target ≈ {word_budget})")
    return output

def generateBeats(script_text):
    """
    Split a generated script into separate beats.
    Each line from the model output is assumed to be one beat.
    
    Args:
        script_text (str): The full script text generated by OpenAI.
    Returns:
        list[str]: List of beats (each beat is a short segment of the story).
    """
    
    if not script_text.strip():
        raise ValueError("Script text cannot be empty.")
    
    # Split into lines, one beat per line
    raw_beats = script_text.strip().split("\n")
    beats = [beat.strip() for beat in raw_beats if beat.strip()]

    # 🔹 Sanity check & fallback
    if len(beats) < 5:  # too few beats, probably model ignored line breaks
        raw_beats = re.split(r'(?<=[.!?…])\s+', script_text)
        beats = [b.strip() for b in raw_beats if b.strip()]

    return beats

